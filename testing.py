# -*- coding: utf-8 -*-
"""Copy of Testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14LVsRsF3DISN5Kqb8u8UCOpAtsaQPP1R
"""
from argparse import ArgumentParser
import pandas as pd
import numpy as np
import torch
from torch.optim import lr_scheduler
import torch.optim as optim
from torch.autograd import Variable
import torch.nn as nn
from PIL import Image
import torch.nn.functional as F
import torchvision.models as models
from torch.utils.data.sampler import SubsetRandomSampler
import os
import torch.nn.functional as F
import torchvision.models as models
from skimage import io
import torchvision.transforms as transforms
from sklearn.preprocessing import LabelEncoder
import pickle
from torch.utils.data import Dataset
import configparser
from models.PPGnet import ClassificationNet
from models.datasets import TigersDatasetTest

def generate_features(fold_path,config):

  model = ClassificationNet()
  device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
  model = model.to(device)

  state=torch.load(fold_path,map_location=torch.device('cpu'))
  model.load_state_dict(state)
  val_transform=transforms.Compose([
        transforms.Resize((256,512)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
  df_test=pd.read_csv(config["test_image"]["test_annot"]+"reid_list_test.csv",header=None,names=["image"])
  test_dataset = TigersDatasetTest(df_test,config["test_image"]["test_images_path"],val_transform)
  test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=100)
  dict_final={}
  i=0
  with torch.no_grad():
    for data_t, image_name in (test_loader):
      print(i)
      i=i+1
      data_t = data_t.to(device)
      outputs_t = model.get_embedding(data_t)
      outputs_t=outputs_t.numpy()
      temp_dict=dict(zip(image_name,outputs_t))
      dict_final.update(temp_dict)
  
  with open(config["test_parameters"]["results_path"]+"/ppbm_fold"+str(fold)+".pkl", 'wb') as f:
          pickle.dump(dict_final, f)

def main():

  config = configparser.ConfigParser()
  config.sections()
  config.read('config.ini')  
  
  fold= int(config["test_parameters"]["no_of_folds"])
  print(fold)
  if fold!= 4:
    fold_path=config["test_parameters"]["weights_path"]+"ppbm_model_last_fold"+str(fold)+".pt"
    print("loading models from",fold_path)
    generate_features(fold_path,config)
    
  else:
    for i in range(4):
      fold_path=config["test_parameters"]["weights_path"]+"ppbm_model_last_fold"+str(i)+".pt"
      print("loading models from",fold_path)
      generate_features(fold_path,config)
      
if  __name__=="__main__":
  main()

